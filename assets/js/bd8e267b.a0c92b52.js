"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[9811],{2399:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=t(4848),o=t(8453);const i={},a=void 0,s={id:"sourcery/ui-container-graphql-files",title:"ui-container-graphql-files",description:"Path Pattern:",source:"@site/docs/sourcery/001-ui-container-graphql-files.md",sourceDirName:"sourcery",slug:"/sourcery/ui-container-graphql-files",permalink:"/docs/sourcery/ui-container-graphql-files",draft:!1,unlisted:!1,editUrl:"https://github.com/simnova/ownercommunity/tree/main/docusaurus/docs/sourcery/001-ui-container-graphql-files.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Sourcery",permalink:"/docs/category/sourcery"},next:{title:"ui-tsx-files",permalink:"/docs/sourcery/ui-tsx-files"}},l={},u=[{value:"Path Pattern:",id:"path-pattern",level:3},{value:"Rules:",id:"rules",level:3}];function c(e){const n={em:"em",h3:"h3",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"path-pattern",children:"Path Pattern:"}),"\n",(0,r.jsxs)(n.p,{children:["ui-",(0,r.jsx)(n.em,{children:"/**/"}),".container.graphql"]}),"\n",(0,r.jsx)(n.h3,{id:"rules",children:"Rules:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"container graphql files are named: <componentName>.container.graphql"}),"\n",(0,r.jsx)(n.li,{children:"container graphql files should be found in the following path pattern: ui-<PortalName>/src/components/layouts/<AreaName>>/components/<componentName>.container.graphql"}),"\n",(0,r.jsxs)(n.li,{children:["container graphql files should contain queries and mutations for the container","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"query and mutation naming convention should follow pattern: <AreaName><ContainerName><QueryName|MutationName>"}),"\n",(0,r.jsx)(n.li,{children:"queries and mutations should only define fields to return by using the spread operator with fragments"}),"\n",(0,r.jsx)(n.li,{children:"fragment for returned fields naming convention should follow the pattern: <AreaName><ContainerName><GraphQLTypeName>Fields"}),"\n",(0,r.jsx)(n.li,{children:"mutation fragment naming convention should follow the pattern: <AreaName><ContainerName><GraphQLTypeName>MutationResultFields"}),"\n",(0,r.jsx)(n.li,{children:"mutation fragment should use spread operator with fragment for GraphQL Type"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"If any of the above rules are broken, direct the developer to refer to the document file named 001-ui-container-graphql-files.md"}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var r=t(6540);const o={},i=r.createContext(o);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);