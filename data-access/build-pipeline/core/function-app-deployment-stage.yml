parameters:
- name: stageName
  displayName: 'Name of the Stage'
  type: string
- name: dependsOnStage
  displayName: 'Depends On Stage'
  type: string
  default: Build
- name: environmentNameBicep
  displayName: 'Environment Name in Bicep config- dev/qa/uat/prd'
  type: string
- name: environmentNameDevOps
  displayName: 'Environment Name in DevOps- Dev/QA/UAT/Production'
  type: string
- name: vmImageName
  displayName: 'VM Image - ubuntu-latest'
  type: string
- name: ServiceConnectionName
  displayName: 'Service Connection Name'
  type: string
- name: deploymentDefaultLocation
  displayName: 'Default Location for Deployment'
  type: string
- name: resourceGroupName
  displayName: 'Resource Group Name'
  type: string
- name: functionAppNamePri
  displayName: 'Function App Name for Primary instance'
  type: string
- name: functionAppNameSec
  displayName: 'Function App Name for Secondary instance'
  type: string
- name: appSettingsJsonFileRelativePathPri
  displayName: 'AppSettings Json File Relative Path for Primary instance'
  type: string
- name: appSettingsJsonFileRelativePathSec
  displayName: 'AppSettings Json File Relative Path for Secondary instance'
  type: string

stages:
- stage: ${{parameters.stageName}}
  displayName: ${{parameters.stageName}} stage
  dependsOn: ${{parameters.dependsOnStage}}
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - job: Infrastructure 
    displayName: Infrastructure Setup 
    pool:
      vmImage: ${{parameters.vmImageName}}
    steps:
    - task: AzureResourceManagerTemplateDeployment@3
      inputs:
        connectedServiceName: ${{parameters.ServiceConnectionName}}
        deploymentName: $(Build.BuildNumber)
        location: ${{parameters.deploymentDefaultLocation}}
        resourceGroupName: ${{parameters.resourceGroupName}}
        csmFile: data-access/iac/main.bicep
        overrideParameters: >
              -environment ${{parameters.environmentNameBicep}}

  - deployment: Application_Deployment_Pri
    displayName: Application Deployment (Primary)
    dependsOn: Infrastructure
    environment: ${{parameters.environmentNameDevOps}}
    pool:
      vmImage: ${{parameters.vmImageName}}
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure Functions App Deploy: ${{parameters.functionAppNamePri}}'
            inputs:
              azureSubscription: ${{parameters.ServiceConnectionName}}
              appType: 'functionAppLinux'
              appName: ${{parameters.functionAppNamePri}}
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              runtimeStack: 'NODE|16'
              deploymentMethod: 'runFromPackage'


  - job: Application_Settings_Pri
    displayName: Application Settings (Primary)
    dependsOn: Application_Deployment_Pri
    pool:
      vmImage: ${{parameters.vmImageName}}
    steps:
    - powershell: |
        $output = Get-Content '$(Build.SourcesDirectory)/${{parameters.appSettingsJsonFileRelativePathPri}}'
        Write-Host "##vso[task.setvariable variable=appSettingsPri]$($output)"
    - task: AzureAppServiceSettings@1
      inputs:
        azureSubscription: ${{parameters.ServiceConnectionName}}
        appName: ${{parameters.functionAppNamePri}}
        appSettings: '$(appSettingsPri)'

  - deployment: Application_Deployment_Sec
    displayName: Application Deployment (Secondary)
    dependsOn: Infrastructure
    environment: ${{parameters.environmentNameDevOps}}
    pool:
      vmImage: ${{parameters.vmImageName}}
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure Functions App Deploy: ${{parameters.functionAppNameSec}}'
            inputs:
              azureSubscription: ${{parameters.ServiceConnectionName}}
              appType: 'functionAppLinux'
              appName: ${{parameters.functionAppNameSec}}
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              runtimeStack: 'NODE|16'
              deploymentMethod: 'runFromPackage'
              

  - job: Application_Settings_Sec
    displayName: Application Settings (Secondary)
    dependsOn: Application_Deployment_Sec
    pool:
      vmImage: ${{parameters.vmImageName}}
    steps:
    - powershell: |
        $output = Get-Content '$(Build.SourcesDirectory)/${{parameters.appSettingsJsonFileRelativePathSec}}'
        Write-Host "##vso[task.setvariable variable=appSettingsSec]$($output)"
    - task: AzureAppServiceSettings@1
      inputs:
        azureSubscription: ${{parameters.ServiceConnectionName}}
        appName: ${{parameters.functionAppNameSec}}
        appSettings: '$(appSettingsSec)'