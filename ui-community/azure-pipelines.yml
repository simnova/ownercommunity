# Node.js with React
# Build a Node.js project that uses React.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
 paths:
  include:
    - ui-community
 branches:
   include:
     - main

pr:
  branches:
    include:
      - main
  paths:
    include:
      - ui-community

variables:
## PROJECT SPECIFIC VARIABLES - start
    PROJECT_NAME: 'ui-community'
    vmImageName: 'ubuntu-latest'
    system.debug: true
    npm_config_cache: $(Pipeline.Workspace)/.npm
    SONAR_USER_HOME: $(Pipeline.Workspace)/.sonar
    SONARCLOUD_PROJECT_KEY: 'oc-ui-community'
    SONARCLOUD_PROJECT_NAME: 'oc-ui-community'
    subscription: 'Azure DevOps Publishing Service Connection'
    #dev
    environmentNameDev: 'oc-dev'
    ResourceGroupNameDev: 'corp-dev-rg'
    destinationBlobContainerDev: 'ocdevstuicavaqbizf2s7le'
    cdnProfileDev: 'cdn-dev-ms-standard'
    cdnNameDev: 'oc-dev-cdne-uia-avaqbizf2s7le'
    #prod
    environmentNamePrd: 'oc-prd'
    ResourceGroupNamePrd: 'corp-oc-rg'
    destinationBlobContainerPrd: 'ocprdstuialbiusbw5zdgpc'
    cdnProfilePrd: 'cdn-prod-ms-standard'
    cdnNamePrd: 'oc-prd-cdne-uia-lbiusbw5zdgpc'

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: dev_build_stage
  displayName: Build Stage
  jobs:
  - job: build_job
    displayName: Build Job
    steps:

    - task: Cache@2
      inputs:
        key: 'sonarcloud | "$(Agent.OS)"'
        restoreKeys: |
            sonarcloud | "$(Agent.OS)"
        path: $(SONAR_USER_HOME)/cache
      displayName: Cache SonarCloud

    - task: SonarCloudPrepare@1
      displayName: 'SonarCloud: Prepare analysis configuration'
      inputs:
        SonarCloud: 'sonarcloudADO'
        organization: 'ecfmg'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: $(SONARCLOUD_PROJECT_KEY)
        cliProjectName: $(SONARCLOUD_PROJECT_NAME)
        cliSources: './$(PROJECT_NAME)/src'

    - template: ./build-pipeline/cra-npm-build.yml
      parameters: 
        buildPath: $(PROJECT_NAME)
        archivePath: $(PROJECT_NAME)/build
        archiveName: $(environmentNameDev)
        npmVersion: '18.x'
        buildEnvSettings: 
          INLINE_RUNTIME_CHUNK: 'false'
          VITE_FUNCTION_ENDPOINT: $(VITE_FUNCTION_ENDPOINT_DEV)

          
        # Publish chromatic
    - task: Bash@3
      condition: ne(variables['Build.Reason'], 'PullRequest')
      displayName: 'chromatic build'
      inputs:
        targetType: 'inline'
        script: |
          npx chromatic --project-token=${CHROMATIC_PROJECT_TOKEN} --auto-accept-changes --allow-console-errors
        workingDirectory: 'ui'
      env: 
        NODE_OPTIONS: --max_old_space_size=16384   
        VITE_MYINTEALTH_URL: $(VITE_MYINTEALTH_URL_DEV)

    - task: SonarCloudAnalyze@1
      displayName: 'SonarCloud: Run analysis'

    - task: SonarCloudPublish@1
      displayName: 'SonarCloud: Publish results on build summary'
      inputs:
        pollingTimeoutSec: '300'
        
    - task: PublishBuildArtifacts@1
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'www'
        publishLocation: 'Container'

- stage: build_prd_stage
  displayName: Build prd Stage
  dependsOn: build_dev_infrastructure
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - job: build_job
    displayName: Build Job
    steps:

    #build PRD
    - template: ./build-pipeline/cra-npm-build.yml
      parameters: 
        buildPath: $(PROJECT_NAME)
        archivePath: $(PROJECT_NAME)/build
        archiveName: $(environmentNamePrd)
        npmVersion: '18.x'
        buildEnvSettings: 
          INLINE_RUNTIME_CHUNK: 'false'
          VITE_FUNCTION_ENDPOINT: $(VITE_FUNCTION_ENDPOINT_PRD)
          VITE_ACCEPT_REQUEST_EXPIRE_DAYS: $(VITE_ACCEPT_REQUEST_EXPIRE_DAYS_PRD)
          VITE_FEATURE_FLAG_URL: $(VITE_FEATURE_FLAG_URL_PRD)
          VITE_GA_MEASUREMENT_ID: $(VITE_GA_MEASUREMENT_ID_PRD)
          VITE_PORTAL_IDENTIFIER: $(VITE_PORTAL_IDENTIFIER_PRD)
          VITE_B2C_CLIENTID: $(VITE_B2C_CLIENTID_PRD)
          VITE_B2C_AUTHORITY: $(VITE_B2C_AUTHORITY_PRD)
          VITE_B2C_REDIRECT_URI: $(VITE_B2C_REDIRECT_URI_PRD)
          VITE_SELF_HOSTED_CYBERSOURCE_URL: $(VITE_SELF_HOSTED_CYBERSOURCE_URL_PRD)
          VITE_APOLLO_POLLING_INTERVAL: $(VITE_APOLLO_POLLING_INTERVAL_PRD)
          VITE_BLOB_STORAGE_CONFIG_URL: $(VITE_BLOB_STORAGE_CONFIG_URL_PRD)
          VITE_B2C_SCOPE: $(VITE_B2C_SCOPE_PRD)
          NODE_OPTIONS: --max_old_space_size=16384
          VITE_NODE_ENVIRONMENT: $(VITE_NODE_ENVIRONMENT_PRD)
          VITE_MYINTEALTH_URL: $(VITE_MYINTEALTH_URL_PRD)
          VITE_IDLE_TIMER: $(VITE_IDLE_TIMER_PRD)
          VITE_LOGOUT_TIMER: $(VITE_LOGOUT_TIMER_PRD)
          VITE_TIMEOUT_BEFORE_MAINTENANCE: $(VITE_TIMEOUT_BEFORE_MAINTENANCE_PRD)
          VITE_BUILD_VERSION: $(Build.BuildId)
          
    - task: PublishBuildArtifacts@1
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'www'
        publishLocation: 'Container'     

- stage: build_dev_infrastructure
  displayName: DEV stage
  dependsOn: dev_build_stage
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - job: Infrastructure 
    displayName: Infrastructure Setup 
    pool:
      vmImage: $(vmImageName) 
    steps:
    - task: AzureResourceManagerTemplateDeployment@3
      inputs:
        connectedServiceName: $(subscription)
        deploymentName: $(Build.BuildNumber)
        location: $(deploymentDefaultLocation)
        resourceGroupName: $(ResourceGroupNameDev)
        csmFile: $(PROJECT_NAME)/iac/main.bicep
        overrideParameters: >
              -environment dev
  - deployment: Application
    dependsOn: Infrastructure
    displayName: Application Deployment
    environment: $(environmentNameDev)
    strategy:
      runOnce:    #rolling, canary are the other strategies that are supported
        deploy:
          steps:
          - template: ./build-pipeline/blob-cdn-website-deploy.yml
            parameters:
              subscription: $(subscription)
              destinationBlobContainer: $(destinationBlobContainerDev)
              archiveName: $(environmentNameDev)
              cdnProfile: $(cdnProfileDev)
              cdnResourceGroup: $(ResourceGroupNameDev)
              cdnName: $(cdnNameDev)  

- stage: build_prd_infrastructure
  displayName: PRD infrastructure stage
  dependsOn: build_prd_stage
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - job: Infrastructure 
    displayName: Infrastructure Setup 
    pool:
      vmImage: $(vmImageName) 
    steps:
    - task: AzureResourceManagerTemplateDeployment@3
      inputs:
        connectedServiceName: $(subscription)
        deploymentName: $(Build.BuildNumber)
        location: $(deploymentDefaultLocation)
        resourceGroupName: $(ResourceGroupNamePrd)
        csmFile: $(PROJECT_NAME)/iac/main.bicep
        overrideParameters: >
              -environment prd
  - deployment: Application
    dependsOn: Infrastructure
    displayName: Application Deployment
    environment: $(environmentNamePrd)
    strategy:
      runOnce:    #rolling, canary are the other strategies that are supported
        deploy:
          steps:
          - template: ./build-pipeline/blob-cdn-website-deploy.yml
            parameters:
              subscription: $(subscription)
              destinationBlobContainer: $(destinationBlobContainerPrd)
              archiveName: $(environmentNamePrd)
              cdnProfile: $(cdnProfilePrd)
              cdnResourceGroup: $(ResourceGroupNamePrd)
              cdnName: $(cdnNamePrd)  