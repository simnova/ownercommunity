"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[1563],{5788:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>m});var s=t(4848),a=t(8453);const o={},r=void 0,i={id:"sourcery/ui-tsx-files",title:"ui-tsx-files",description:"Path Pattern:",source:"@site/docs/sourcery/002-ui-tsx-files.md",sourceDirName:"sourcery",slug:"/sourcery/ui-tsx-files",permalink:"/docs/sourcery/ui-tsx-files",draft:!1,unlisted:!1,editUrl:"https://github.com/simnova/ownercommunity/tree/main/docusaurus/docs/sourcery/002-ui-tsx-files.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ui-container-graphql-files",permalink:"/docs/sourcery/ui-container-graphql-files"},next:{title:"data-access-graphql",permalink:"/docs/sourcery/data-access-graphql"}},l={},m=[{value:"Path Pattern:",id:"path-pattern",level:3},{value:"Rules:",id:"rules",level:3},{value:"Proper examples:",id:"proper-examples",level:3},{value:"Rough examples below:",id:"rough-examples-below",level:3},{value:"List Example:",id:"list-example",level:3},{value:"For Example:",id:"for-example",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h3,{id:"path-pattern",children:"Path Pattern:"}),"\n",(0,s.jsxs)(n.p,{children:["ui-",(0,s.jsx)(n.em,{children:"/**/"}),".tsx"]}),"\n",(0,s.jsx)(n.h3,{id:"rules",children:"Rules:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The exported react component name should match the container name (the file name should be kabob-cased, and the component name should be PascalCased) unless the file name is index.tsx, then the component name should match the parent folder name."}),"\n",(0,s.jsx)(n.li,{children:"The component should be a functional component."}),"\n",(0,s.jsxs)(n.li,{children:["An interface or type should be defined for the component's props, named <ComponentName>Props.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"the props should refer to data only by the fragment name or graphql input type name"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Any use of the AntDesign Table should leverage TableColumnsType and must specify the type of the data (usually the fragment type)"}),"\n",(0,s.jsx)(n.li,{children:"Any use of the AntDesign useForm hook must specify the type of the form data (usually the GraphQL input type)"}),"\n",(0,s.jsx)(n.li,{children:"If any of the above rules are broken, direct the developer to refer to the document file named 002-ui-tsx-files.md"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"proper-examples",children:"Proper examples:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/simnova/ownercommunity/blob/main/ui-community/src/components/layouts/admin/components/members-accounts-add.tsx",children:"https://github.com/simnova/ownercommunity/blob/main/ui-community/src/components/layouts/admin/components/members-accounts-add.tsx"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/simnova/ownercommunity/blob/main/ui-community/src/components/layouts/admin/components/members-accounts-list.tsx",children:"https://github.com/simnova/ownercommunity/blob/main/ui-community/src/components/layouts/admin/components/members-accounts-list.tsx"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"rough-examples-below",children:"Rough examples below:"}),"\n",(0,s.jsx)(n.h3,{id:"list-example",children:"List Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"\nimport React from 'react';\nimport { Table, TableColumnsType } from 'antd';\nimport { AdminContactsListContainerContactFieldsFragment } from from '../../../../generated';\n\n\nexport interface ContactListProps {\n  data: AdminContactsListContainerContactFieldsFragment[];\n}\n\nexport const ContactsList: React.FC<ContactListProps> = ({ data }) => {\n  const columns: TableColumnsType<AdminContactsListContainerContactFieldsFragment> = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name',\n    },\n    {\n      title: 'Age',\n      dataIndex: 'age',\n      key: 'age',\n    },\n    {\n      title: 'Address Line 1',\n      dataIndex: '[address][addressLine1]',\n      key: 'address1',\n    },\n    {\n      title: 'Address Line 2',\n      dataIndex: '[address][addressLine1]',\n      key: 'address1',\n    },\n    {\n      title: 'City',\n      dataIndex: '[address][city]',\n      key: 'city',\n    },\n    {\n      title: 'State',\n      dataIndex: '[address][state]',\n      key: 'state',\n    },\n    {\n      title: 'Zip',\n      dataIndex: '[address][zip]',\n      key: 'zip',\n    },\n  ];\n\n  return (\n    <Table columns={columns} dataSource={data} />\n  );\n};\n\n"})}),"\n",(0,s.jsx)(n.h3,{id:"for-example",children:"For Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'import React from \'react\';\nimport { Button, Form, Input } from \'antd\';\nimport { ContactCreateInput } from \'../../../../generated\';\n\nexport interface ContactsCreateProps {\n  onSave: (values: ContactsCreateInput) => void;\n}\n\nexport const ContactsCreate: React.FC<ContactsCreateProps> = (props) =>  {\n    const [form] = Form.useForm<ContactCreateInput>();\n    const [formLoading, setFormLoading] = React.useState(false);\n\n    \n    const handleFinish = (values: ContactCreateInput) => {\n        setFormLoading(true);\n        props.onSave(values);\n        setFormLoading(false);\n    };\n    \n    return (\n        <Form form={form} onFinish={handleFinish}>\n        <Form.Item name="name" label="Name">\n            <Input />\n        </Form.Item>\n        <Form.Item name="age" label="Age">\n            <Input />\n        </Form.Item>\n        <Form.Item name={["address", "addressLine1"]}label="Address Line 1">\n            <Input />\n        </Form.Item>\n        <Form.Item name={["address", "addressLine2"]}label="Address Line 2">\n            <Input /> \n        </Form.Item>\n        <Form.Item name={["address", "city"]}label="City">\n            <Input />\n        </Form.Item>\n        <Form.Item name={["address", "state"]}label="State">\n            <Input /> \n        </Form.Item>\n        <Form.Item name={["address", "zip"]}label="Zip">\n            <Input />\n        </Form.Item>\n\n        <Form.Item>\n            <Button type="primary" htmlType="submit" loading={formLoading}>\n            Save\n            </Button>\n        </Form.Item>\n        </Form>\n    );\n    };\n    \n'})}),"\n",(0,s.jsx)(n.p,{children:"}"})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var s=t(6540);const a={},o=s.createContext(a);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);