type ServiceTicket implements MongoBase {
  community: Community!
  property: Property
  requestor: Member!
  assignedTo: Member
  service: Service
  title: String!
  description: String!
  status: String!
  priority: Int!
  ticketType: String
  photos: [ServiceTicketPhoto]
  activityLog: [ServiceTicketActivityDetail]
  messages: [ServiceTicketV1Message]
  revisionRequest: ServiceTicketV1RevisionRequest
  assignedVendor: VendorUser
  id: ObjectID!
  schemaVersion: String
  createdAt: DateTime
  updatedAt: DateTime
}

type VendorUserPersonalInformation {
  identityDetails: VendorUserIdentityDetails
  contactInformation: VendorUserContactInformation
}

type VendorUserIdentityDetails {
  lastName: String
  legalNameConsistsOfOneName: Boolean
  restOfName: String
}

type VendorUserContactInformation {
  email: String
}

type VendorUser implements MongoBase {
  externalId: String
  displayName: String
  email: String
  accessBlocked: Boolean
  tags: [String]
  personalInformation: VendorUserPersonalInformation
  id: ObjectID!
  schemaVersion: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ServiceTicketActivityDetail implements MongoSubdocument {
  activityType: String!
  activityDescription: String!
  activityBy: Member!

  id: ObjectID!
  createdAt: DateTime
  updatedAt: DateTime
}

type ServiceTicketV1Message {
  sentBy: String!
  initiatedBy: Member
  message: String!
  embedding: String

  id: ObjectID!
  createdAt: DateTime!
  isHiddenFromApplicant: Boolean!
}

type ServiceTicketV1RevisionRequest {
  requestedAt: DateTime!
  requestedBy: Member!
  revisionSummary: String!
  requestedChanges: ServiceTicketV1RevisionRequestedChanges!
  revisionSubmittedAt: DateTime
}

type ServiceTicketV1RevisionRequestedChanges {
  requestUpdatedAssignment: Boolean!
  requestUpdatedStatus: Boolean!
  requestUpdatedProperty: Boolean!
}

type ServiceTicketPhoto implements MongoSubdocument {
  documentId: String!
  description: String!

  id: ObjectID!
  createdAt: DateTime
  updatedAt: DateTime
}
union Ticket = ServiceTicket | ViolationTicket
extend type Query {
  serviceTicket(id: ObjectID!): ServiceTicket
  serviceTicketsOpenByCommunity: [ServiceTicket]
  serviceTicketsOpenByRequestor: [ServiceTicket]
  serviceTicketsClosedByRequestor: [ServiceTicket]
  serviceTicketsAssignedToCurrentUser: [ServiceTicket]
  serviceTicketsByCommunityId(communityId: ID!): [Ticket]
  serviceTicketsSearchAdmin(input: ServiceTicketsSearchInput!): ServiceTicketsSearchResult
  serviceTicketsSearch(input: ServiceTicketsSearchInput!): ServiceTicketsSearchResult
  serviceTicketReIndex: ServiceTicketsSearchResult

}

extend type Mutation {
  serviceTicketCreate(input: ServiceTicketCreateInput!): ServiceTicketMutationResult!
  serviceTicketUpdate(input: ServiceTicketUpdateInput!): ServiceTicketMutationResult!
  serviceTicketAddPhoto(input: ServiceTicketAddPhotoInput!): ServiceTicketPhotoAuthHeaderResult!
  serviceTicketRemovePhoto(input: ServiceTicketRemovePhotoInput!): ServiceTicketMutationResult!
  serviceTicketSubmit(input: ServiceTicketSubmitInput!): ServiceTicketMutationResult!
  serviceTicketAssign(input: ServiceTicketAssignInput!): ServiceTicketMutationResult!
  serviceTicketAddUpdateActivity(input: ServiceTicketAddUpdateActivityInput!): ServiceTicketMutationResult!
  serviceTicketChangeStatus(input: ServiceTicketChangeStatusInput!): ServiceTicketMutationResult!
  serviceTicketDelete(input: ServiceTicketDeleteInput!): ServiceTicketMutationResult!
}

type ServiceTicketMutationResult implements MutationResult {
  status: MutationStatus!
  serviceTicket: ServiceTicket
}

input ServiceTicketDeleteInput {
  serviceTicketId: ObjectID!
}

input ServiceTicketCreateInput {
  propertyId: ObjectID!
  requestorId: ObjectID
  title: String!
  description: String!
  serviceId: ObjectID
}

input ServiceTicketUpdateInput {
  serviceTicketId: ObjectID!
  propertyId: ObjectID
  title: String
  description: String
  priority: Int
  serviceId: ObjectID
  messages: [ServiceTicketV1MessageInput]
  revisionRequest: ServiceTicketV1RevisionRequestUpdateInput
  assignedVendor:ObjectID
}

input ServiceTicketV1MessageInput {
  id: ObjectID
  sentBy: String!
  initiatedBy: ObjectID
  message: String!
  embedding: String
  isHiddenFromApplicant: Boolean
}

input ServiceTicketV1RevisionRequestUpdateInput {
  requestedAt: DateTime
  requestedBy: ObjectID
  revisionSummary: String
  requestedChanges: ServiceTicketV1RevisionRequestedChangesUpdateInput
  revisionSubmittedAt: DateTime
}

input ServiceTicketV1RevisionRequestedChangesUpdateInput {
  requestUpdatedAssignment: Boolean
  requestUpdatedStatus: Boolean
  requestUpdatedProperty: Boolean
}

input ServiceTicketAddPhotoInput {
  serviceTicketId: ObjectID!
  contentType: String!
  contentLength: String!
  description: String
}

input ServiceTicketRemovePhotoInput {
  serviceTicketId: ObjectID!
  photoId: ObjectID!
}

type ServiceTicketPhotoAuthHeaderResult implements MutationResult {
  status: MutationStatus!
  authHeader: BlobAuthHeader
  serviceTicket: ServiceTicket
}

input ServiceTicketSubmitInput {
  serviceTicketId: ObjectID!
}

input ServiceTicketAssignInput {
  serviceTicketId: ObjectID!
  assignedToId: ObjectID
}

input ServiceTicketAddUpdateActivityInput {
  serviceTicketId: ObjectID!
  activityDescription: String!
}

input ServiceTicketChangeStatusInput {
  serviceTicketId: ObjectID!
  status: String!
  activityDescription: String
}

input ServiceTicketsSearchInput {
  searchString: String
  options: ServiceTicketsSearchOptions
}

input ServiceTicketsSearchOptions {
  filter: ServiceTicketsSearchFilterDetail
  facets: [String]
  top: Int
  skip: Int
  orderBy: [String]
}

input ServiceTicketsSearchFilterDetail {
  requestorId: [String]
  assignedToId: [String]
  status: [String]
  priority: [Int]
  communityId: [String]
}

type ServiceTicketsSearchResult {
  serviceTicketsResults: [ServiceTicketsResult]
  count: Int
  facets: ServiceTicketsSearchFacets
}

type ServiceTicketsResult {
  id: String
  communityId: String
  propertyId: String
  title: String
  requestor: String
  assignedTo: String
  requestorId: String
  assignedToId: String
  description: String
  ticketType: String
  status: String
  priority: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type ServiceTicketsSearchFacets {
  requestor: [FacetDetail]
  assignedTo: [FacetDetail]
  status: [FacetDetail]
  priority: [FacetDetail]
  requestorId: [FacetDetail]
  assignedToId: [FacetDetail]
}
